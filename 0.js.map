{"version":3,"sources":["webpack:///0.js","webpack:///./assets/js/firebase.js","webpack:///./assets/js/notice.js"],"names":["webpackJsonp","45","module","exports","__webpack_require__","Object","defineProperty","value","_firebase","_firebase2","obj","__esModule","default","config","apiKey","authDomain","databaseURL","storageBucket","messagingSenderId","initializeApp","e","code","console","error","54","subscribeChannel","token","topic","url","fetch","headers","method","then","response","status","Error","messageCallback","payload","navigator","serviceWorker","getRegistration","registration","notification","showNotification","title","icon","body","notifications","vibrate","Authorization","Content-Type","messaging","requestPermission","useServiceWorker","getToken","onMessage","catch","err"],"mappings":"AAAAA,cAAc,IAERC,GACA,SAAUC,EAAQC,EAASC,GAEjC,YAGAC,QAAOC,eAAeH,EAAS,cAC7BI,OAAO,GCPT,IAAAC,GAAAJ,EAAA,IDYIK,EAEJ,SAAgCC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,IAF/CF,GCVlCK,GACJC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,cAAe,2BACfC,kBAAmB,eAErB,KACET,EAAAG,QAASO,cAAcN,GACvB,MAAOO,GACQ,sBAAXA,EAAEC,MAA8BC,QAAQC,MAAMH,GDkBpDjB,EAAQS,QAAUH,EAAWG,SAIvBY,GACA,SAAUtB,EAAQC,EAASC,GAEjC,YE9BA,SAASqB,GAAiBC,EAAOC,GAC/B,GAAMC,wCAA2CF,EAA3C,eAA+DC,CACrE,OAAOE,OAAMD,GACXE,UACAC,OAAQ,SAEPC,KAAK,SAACC,GACL,GAAwB,MAApBA,EAASC,OACX,OAAO,CAET,MAAM,IAAIC,OAAMF,KAItB,QAASG,GAAgBC,GACvBC,UAAUC,cAAcC,kBACrBR,KAAK,SAACS,GAAiB,GACdC,GAAiBL,EAAjBK,YACR,OAAOD,GAAaE,iBAAiBD,EAAaE,OAChDC,KAAM,+BACNC,KAAMT,EAAQU,cAAcD,KAC5BE,SAAU,IAAK,IAAK,SA9B5B,GAAAxC,GAAAJ,EAAA,IF4CIK,EAEJ,SAAgCC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,IAF/CF,GExClCsB,GACJmB,6KACAC,eAAgB,oBA6BZC,EAAY1C,EAAAG,QAASuC,WAE3BA,GAAUC,oBACPpB,KAAK,iBAAMM,WAAUC,cAAcC,oBACnCR,KAAK,SAACS,GAEL,MADAU,GAAUE,iBAAiBZ,GACpBU,EAAUG,aAElBtB,KAAK,SAAAN,GAAA,MAASD,GAAiBC,EAAO,eACtCM,KAAK,iBAAMmB,GAAUI,UAAUnB,KAC/BoB,MAAM,SAACC,GACNnC,QAAQC,MAAM,sCAAuCkC","file":"0.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 45:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _firebase = __webpack_require__(55);\n\nvar _firebase2 = _interopRequireDefault(_firebase);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar config = {\n  apiKey: \"AIzaSyBntaQn3SVsGDq36gdiDrJOdcoJ86c8plY\",\n  authDomain: \"hkoscon-2017.firebaseapp.com\",\n  databaseURL: \"https://hkoscon-2017.firebaseio.com\",\n  storageBucket: \"hkoscon-2017.appspot.com\",\n  messagingSenderId: \"621449212856\"\n};\n\ntry {\n  _firebase2.default.initializeApp(config);\n} catch (e) {\n  if (e.code !== 'app/duplicate-app') console.error(e);\n}\n\nexports.default = _firebase2.default;\n\n/***/ }),\n\n/***/ 54:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _firebase = __webpack_require__(45);\n\nvar _firebase2 = _interopRequireDefault(_firebase);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* globals navigator, fetch */\n\nvar headers = {\n  Authorization: 'key=' + \"AAAAkLFCc7g:APA91bG5rjpKCNky7sZ4bXCnnzyZe-PGqxKIOxCPS7uUAT9TsplPz1bWC3yflF6EpB3tIiwZTcS8sCmfXGUuilwPKKa3ymP3qSWZso7vi10-nPaykYrIdI-RZ14mFyeGKsdRatGTIPAi\",\n  'Content-Type': 'application/json'\n};\n\nfunction subscribeChannel(token, topic) {\n  var url = 'https://iid.googleapis.com/iid/v1/' + token + '/rel/topics/' + topic;\n  return fetch(url, {\n    headers: headers,\n    method: 'POST'\n  }).then(function (response) {\n    if (response.status === 200) {\n      return true;\n    }\n    throw new Error(response);\n  });\n}\n\nfunction messageCallback(payload) {\n  navigator.serviceWorker.getRegistration().then(function (registration) {\n    var notification = payload.notification;\n\n    return registration.showNotification(notification.title, {\n      icon: 'https://hkoscon.org/logo.png',\n      body: payload.notifications.body,\n      vibrate: [500, 100, 500]\n    });\n  });\n}\n\nvar messaging = _firebase2.default.messaging();\n\nmessaging.requestPermission().then(function () {\n  return navigator.serviceWorker.getRegistration();\n}).then(function (registration) {\n  messaging.useServiceWorker(registration);\n  return messaging.getToken();\n}).then(function (token) {\n  return subscribeChannel(token, 'broadcast');\n}).then(function () {\n  return messaging.onMessage(messageCallback);\n}).catch(function (err) {\n  console.error('Unable to get permission to notify.', err);\n});\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 0.js","// @flow\n\nimport firebase from 'firebase';\n\nconst config = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.FIREBASE_DATEBASE_URL,\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n};\ntry {\n  firebase.initializeApp(config);\n} catch (e) {\n  if (e.code !== 'app/duplicate-app') console.error(e);\n}\n\nexport default firebase;\n\n\n\n// WEBPACK FOOTER //\n// ./assets/js/firebase.js","import firebase from './firebase';\n\n/* globals navigator, fetch */\n\nconst headers = {\n  Authorization: `key=${process.env.FIREBASE_MESSAGE_SERVER_KEY}`,\n  'Content-Type': 'application/json',\n};\n\nfunction subscribeChannel(token, topic) {\n  const url = `https://iid.googleapis.com/iid/v1/${token}/rel/topics/${topic}`;\n  return fetch(url, {\n    headers,\n    method: 'POST',\n  })\n    .then((response) => {\n      if (response.status === 200) {\n        return true;\n      }\n      throw new Error(response);\n    });\n}\n\nfunction messageCallback(payload) {\n  navigator.serviceWorker.getRegistration()\n    .then((registration) => {\n      const { notification } = payload;\n      return registration.showNotification(notification.title, {\n        icon: 'https://hkoscon.org/logo.png',\n        body: payload.notifications.body,\n        vibrate: [500, 100, 500],\n      });\n    });\n}\n\nconst messaging = firebase.messaging();\n\nmessaging.requestPermission()\n  .then(() => navigator.serviceWorker.getRegistration())\n  .then((registration) => {\n    messaging.useServiceWorker(registration);\n    return messaging.getToken();\n  })\n  .then(token => subscribeChannel(token, 'broadcast'))\n  .then(() => messaging.onMessage(messageCallback))\n  .catch((err) => {\n    console.error('Unable to get permission to notify.', err);\n  });\n\n\n\n// WEBPACK FOOTER //\n// ./assets/js/notice.js"],"sourceRoot":""}